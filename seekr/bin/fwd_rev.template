replicaBarrier
seed [expr int(0*srand(int(100000*rand()) + 100*$replica_id) + 100000*rand() + 1)]

if { ! [myReplica] } { # if we are replica 0: the master replica
  # these procs handle situations where replica jobs finish, and a new one
  # can be put into its place. Jim Phillips wrote these functions
  set work_queue {}
  set worker_stack {}
  proc workers_idle {} {
    global worker_stack
    return [llength $worker_stack]
  }
  proc push_worker {w} {
    global worker_stack
    lappend worker_stack $w
  }
  proc pop_worker {} {
    global worker_stack
    set w [lindex $worker_stack end]
    set worker_stack [lreplace $worker_stack end end]
    return $w
  }
  proc push_work {w} {
    global work_queue
    if { $w != {} } {
      lappend work_queue $w
    }
  }
  proc pop_work {} {
    global work_queue
    set w [lindex $work_queue 0]
    set work_queue [lreplace $work_queue 0 0]
    return $w
  }
  proc enqueue_work_0 work {
    if [workers_idle] {
      replicaSend $work [pop_worker]
    } else {
      push_work $work
    }
  }
  proc dequeue_work_0 worker {
    global work_queue
    if [llength $work_queue] {
      return [pop_work]
    }
    if { [workers_idle] == [numReplicas] - 1 } {
      while { [workers_idle] } {
        replicaSend break [pop_worker]
      }
      return break
    }
    push_worker $worker
    return {}
  }
}

proc enqueue_work work { ;# this is the function we call when we want to assign a job to a replica
  replicaEval 0 [list enqueue_work_0 $work]
}

proc schedule_work {} {
  while { 1 } {
    set w [replicaEval 0 "dequeue_work_0 [myReplica]"]
    if { $w == {} } {
      set w [replicaRecv 0]
    }
    eval $w
  }
}

proc run_dummy_job {} { ;# this is just to give the replicas something to do if there aren't enough jobs on the queue
  set replica_id [myReplica]
  global aborting ;# whether the current job is being aborted at the end of this run cycle
  global reverse_failed ;# whether the reversal stage failed or not
  global stepnum
  global incubation_start
  global STAGE ;# 'forward' or 'reverse'
  global ABORT_ON_CROSSING ;# whether to halt the job immmediately once a milestone is crossed
  global CARE_ABOUT_SELF ;# whether we count a transition to the source milestone: "True" for reversal stage
  global ID ;# which job we are
  global VEL_ID :# which velocity ID we are
  global RUN_FREQ ;# how many steps per run cycle
  global whoami
  global whoami_const
  global UMBRELLA_GLOB_DIR; global UMBRELLA_GLOB_NAME; global TEMP
  set reverse_failed "False"
  set aborting "True"
  set stepnum 0
  set incubation_start 0
  set STAGE "dummy"
  #set ABORT_ON_CROSSING "True" ;# MARKED FOR REMOVAL: as long as reverses are automatically aborted, the user should be allowed to set this value for the forwards
  set CARE_ABOUT_SELF "False"
  set ID 0
  set VEL_ID 0
  set whoami $whoami_const
  
  # I need it to load an actually stable conformation here so that it doesn't blow up!!!  
  set umbrella_dcd [lindex [lsort [ glob -directory $UMBRELLA_GLOB_DIR $UMBRELLA_GLOB_NAME ]] 0] ;# find all ens_equil DCDs
  coorfile open dcd $umbrella_dcd ;# open the DCD file
  coorfile read ;# read this frame of the DCD
  reinitvels $TEMP ;# randomly assign velocities based on temperature
  
  outputname dummy.$replica_id ;# assign the names of the various NAMD output
  dcdfile dummy.$replica_id.dcd
  restartname dummy.$replica_id.restart
  run 100 ;# run whatever is loaded for awhile
}

proc run_fwd_rvs {i j checkpoint_name {start_stage "reverse"} {start_first_milestone_hit "True"} {start_on_step 0}} { ;# an instance of this proc is the 'job' to assign one by one to the replicas
  print "SEEKR: starting job: $i on replica: [myReplica]"
  global aborting ;# whether the current job is being aborted at the end of this run cycle
  global reverse_failed ;# whether the reversal stage failed or not
  global stepnum
  global incubation_start
  global STAGE ;# 'forward' or 'reverse'
  global ABORT_ON_CROSSING ;# whether to halt the job immediately once a milestone is crossed
  global CARE_ABOUT_SELF ;# whether we count a transition to the source milestone: "True" for reversal stage
  global ID ;# which job we are
  global VEL_ID :# which velocity ID we are
  global RUN_FREQ ;# how many steps per run cycle
  global whoami
  global whoami_const
  global first_milestone_hit
  global REV_FILENAME_BASE; global REV_FILENAME
  global FWD_FILENAME_BASE; global FWD_FILENAME
  set reverse_failed "False"
  set aborting "False"
  set stepnum $start_on_step
  set incubation_start 0
  set STAGE "reverse"
  set first_milestone_hit "True"
  set CARE_ABOUT_SELF "True"
  set ID $i
  set VEL_ID $j
  set whoami $whoami_const
  set REV_FILENAME "${REV_FILENAME_BASE}.[myReplica]"
  set FWD_FILENAME "${FWD_FILENAME_BASE}.[myReplica]"
  outputname reverse.$i.$j ;# assign the names of the various NAMD output
  dcdfile reverse.$i.$j.dcd
  restartname reverse.$i.$j.restart
  
  print "SEEKR: Executing run_fwd_rvs. i: $i, j: $j, checkpoint_name: $checkpoint_name, start_stage: $start_stage, start_first_milestone_hit: $start_first_milestone_hit, start_on_step: $start_on_step"

  checkpointLoad $checkpoint_name global ;#revert to the starting config
  if {$start_stage == "reverse"} { ;# we are running reversals
    rescalevels -1 ;# reverse all velocities from the checkpoint
    print "SEEKR: Running reversal stage job: ${i}_${j} on replica: [myReplica]"
    run $RUN_FREQ ;# run the first N steps
    while {$aborting == "False"} { ;# the reverse run cycle
      run norepeat $RUN_FREQ ;# continue to run N steps until $aborting is set to "True"
    }
    set aborting "False"
    set incubation_start 0 ;# start with both of these at zero
    set stepnum 0
  }
  if {$reverse_failed == "False" } { ;# we are running forwards
    print "SEEKR: Running forward stage job: ${i}_${j} on replica: [myReplica]"
    set STAGE forward
    set CARE_ABOUT_SELF False ;# we don't care about the source milestone anymore
    set whoami $whoami_const
    set first_milestone_hit $start_first_milestone_hit
    outputname forward.$i.$j
    dcdfile forward.$i.$j.dcd ;# rename the various NAMD outputs
    restartname forward.$i.$j.restart
    checkpointLoad $checkpoint_name global ;#revert to the starting config
    run $RUN_FREQ ;# run the first N steps
    while {$aborting == "False"} { ;# the forward run cycle
      run norepeat $RUN_FREQ ;# continue to run N steps until $aborting is set to "True"
    }
  }
  checkpointFree $checkpoint_name global ;# free some memory once we are done with this checkpoint
}

startup
replicaBarrier

if { ! [myReplica] } { ;# if we are the master replica
  # FWD/REV Restart process workflow for if a job is killed midway thru
  array set rev_dict {} ;# create an empty reversal index dictionary (array)
  array set fwd_dict {} ;# create an empty forward index dictionary (array)
  array set rev_time_dict {} ;# an array of times taken for reversal successes or failures
  array set fwd_time_dict {} ;# an array of times taken for forward successes or failures
  array set fwd_dict_start_crossed {} ;# an array keeping track of whether the first milestone was every crossed in a forward phase 
  # 1. Check for existence of completed reverse and forward files
  
  for {set counter 0} {$counter < [numReplicas]} {incr counter} {
    set THIS_REV_FILENAME $REV_FILENAME_BASE.$counter
    if {[ file exists $THIS_REV_FILENAME ]} {
      print "Reading reversal completion file: $THIS_REV_FILENAME"
      # If doesn't exist, then just skip down to submissions of the replicas
      # 2. For each entry in reverse file:
      set revfile [open $THIS_REV_FILENAME r] ;# open the reversal file: this has been written by the milestoning.tcl script while the sims were running
      set lines [split [read $revfile] "\n"] ;# split the lines by newlines
      foreach line $lines { ;# each of the lines contains info about the jobs that were running, whether they finished or need to be restarted
        set index [lindex $line 0] ;# the index of the job position and velocity combo
        set outcome [lindex $line 1] ;# whether the reversal stage was a success
        print "Adding to dictionary: $index : $outcome"
        if { $index != "" } {set rev_dict($index) $outcome} ;# fill out the dictionary with this info
        if {(($outcome == "succeeded") || ($outcome == "failed")) && ([llength $line] > 2)} {
          set revtime [lindex $line 3] ;# whether the reversal stage was a success
          if { $index != "" } {set rev_time_dict($index) $revtime} ;# fill out the dictionary with this info
        }
      }
    }
  }

  for {set counter 0} {$counter < [numReplicas]} {incr counter} {
    set THIS_FWD_FILENAME $FWD_FILENAME_BASE.$counter
    if {[ file exists $THIS_FWD_FILENAME ]} {
      # If doesn't exist, then just skip down to submissions of the replicas
      print "Reading forward completion file: $THIS_FWD_FILENAME"
      # 3. For each entry in forward file:
      set fwdfile [open $THIS_FWD_FILENAME r] ;# open the forward file: this has been written by the milestoning.tcl script while the sims were running
      set lines [split [read $fwdfile] "\n"] ;# split the lines by newlines
      foreach line $lines { ;# each of the lines contains info about the jobs that were running, whether they finished or need to be restarted
        #  a. place entry into an dictionary: all values will be 1
        set index [lindex $line 0] ;# the index of the job
        set outcome [lindex $line 1] ;# whether the forward stage was a success
        set fwdstartcrossed [lindex $line 2]
        set fwd_dict($index) $outcome ;# they will all have a value of 1
        set fwd_dict_start_crossed($index) $fwdstartcrossed
        if {(($outcome == "succeeded") || ($outcome == "failed")) && ([llength $line] > 2)} {
          set fwdtime [lindex $line 5]
          set fwd_time_dict($index) $fwdtime
        }
      }
    }
  }

  # Now look through the DCDs from the ens_equil (umbrella sampling) stage to find all starting configs
  set umbrella_dcds [lsort [ glob -directory $UMBRELLA_GLOB_DIR $UMBRELLA_GLOB_NAME ]] ;# find all ens_equil DCDs
  #print "umbrella_dcds: $umbrella_dcds"
  set umbrella_dcds_index 0
  set umbrella_dcd [lindex $umbrella_dcds $umbrella_dcds_index]
  set umbrella_start $ENS_EQUIL_FIRST_FRAME ;# the step to start at with the dcd
  set umbrella_stride $ENS_EQUIL_STRIDE ;# the stride between frames to pull and simulate
  set no_more_umb_dcds "False"
  print "Opening dcd file: $umbrella_dcd"

  # Skip any DCD frames that need to be skipped at the beginning
  coorfile open dcd $umbrella_dcd ;# open the first DCD file
  for {set i 0} {$i < $umbrella_start} {incr i} { ;# skip ahead to the starting location of the dcd
    set result [coorfile skip] ;# see if we reached the end of the file
    print "skipping. result: $result"
    if {$result == -1} { ;# then we've reached the end of the file, we need to load the next dcd
      coorfile close ;# close the current DCD
      incr umbrella_dcds_index ;# increment the DCD index
      if {$umbrella_dcds_index >= [llength $umbrella_dcds]} {set no_more_umb_dcds "True"; break} ;# if we have no more DCDs, then break out
      set umbrella_dcd [lindex $umbrella_dcds $umbrella_dcds_index] ;# get the next DCD file name
      print "Opening dcd file: $umbrella_dcd"
      coorfile open dcd $umbrella_dcd ;# open the DCD file
      coorfile skip ;# and skip the frame in this file
    }
  }

  if { $no_more_umb_dcds == "False" } { ;# as long as we still have DCD files to read
    set result [coorfile read] ;# read the positions from this frame in the dcd
    if {$result == -1} { ;# then we've reached the end of the file, we need to load the next DCD
      coorfile close ;# close the current DCD
      incr umbrella_dcds_index ;# increment the DCD index
      if {$umbrella_dcds_index < [llength $umbrella_dcds]} { ;# as long as we aren't surpassing the number of DCD files that there are
        set umbrella_dcd [lindex $umbrella_dcds $umbrella_dcds_index] ;# get the next DCD file name
        print "Opening dcd file: $umbrella_dcd"
        coorfile open dcd $umbrella_dcd ;# open the DCD file
        coorfile read ;# read this frame of the DCD
      } else { ;# if we have no more DCDs to read
        set no_more_umb_dcds "True" ;# then alert future code that we are out of DCD files to read
      }
    }
  }
  print "SEEKR: done reading initial positions"
  reinitvels $TEMP ;# randomly assign velocities based on temperature
  print "SEEKR: done reading initial velocities"
}
  
set NUM_CHUNKS [expr "($NUM_REVERSALS * $LAUNCHES_PER_CONFIG) / $FRAME_CHUNK_SIZE"]
set NUM_CONFIGS_PER_CHUNK [expr "$NUM_REVERSALS / $NUM_CHUNKS"]

for {set chunk_id 0} {$chunk_id < $NUM_CHUNKS} {incr chunk_id} {
  if { ! [myReplica] } {
  set num_submitted_jobs 0 ;# keep track of the number of jobs sent to the work queue, in case we need to add some dummy jobs
  for { set icounter 0 } { $icounter < $NUM_CONFIGS_PER_CHUNK } { incr icounter } { ;# for all possible reversals we are going to run
    for { set j 0 } { $j < $LAUNCHES_PER_CONFIG } { incr j } { ;# the number of times to reinitialize velocities at this position...
      set i [expr "($chunk_id * $NUM_CONFIGS_PER_CHUNK) + $icounter"]
      set stepnum 0
      set incubation_start 0
      set start_stage "reverse"
      set start_first_milestone_hit "False"
      if { $no_more_umb_dcds == "True" } { print "Requested reversals exceeds DCD file length. Skipping all jobs after this point."; break }
      if {[file exists "reverse.$i.$j.restart.coor"] && [file exists "reverse.$i.$j.restart.vel"] && [file exists "reverse.$i.$j.restart.xsc"] && [info exists rev_dict(job${i}_${j})] } { ;# then commence from the restart files; otherwise just go with the dcd coords and random vels
        if {($rev_dict(job${i}_${j}) == "succeeded") || ($rev_dict(job${i}_${j}) == "failed")} {
          print "Job ${i}_${j} reversal already succeeded or failed completed, skipping reversal step..."
        } else {
          print "Job ${i}_$j reversal did not finished, restarting from the point where the restarts left off..."
          reinitatoms reverse.$i.$j.restart ;# overwhelming DCD positions and random vels
          #if {[ info exists rev_dict(job${i}_${j}) ]} { ;# if we find this job in the REV_COMPLETED.txt file... ;# MARK FOR REMOVAL: REDUNDANT
          set stepnum $rev_dict(job${i}_${j}) ;# restart the step number that we left off at
          set incubation_start 0 ;# because when the job failed, this had been at zero
          print "Resetting stepnum: $stepnum, and incubation_start: $incubation_start"
          #}
        }
      }

      if {[ info exists rev_dict(job${i}_${j}) ] && (($rev_dict(job${i}_${j})=="failed") || ($rev_dict(job${i}_${j})=="succeeded"))} { ;# whether or not the restarts exist, but the reversal job did occur and finish
        set outcome $rev_dict(job${i}_$j)
        if {$outcome == "failed"} { ;# the reversal failed, so we don't need to run it
          print "Job ${i}_${j} reversal already completed and failed, skipping..."
          continue ;# move on to the next job
        } elseif {$outcome == "succeeded"} { ;# if the reversal succeeded, then we need to perhaps rerun the forward
          if {[ info exists fwd_dict(job${i}_${j})] && ($fwd_dict(job${i}_${j})=="succeeded") } { ;# then the forward stage of this one completed, we're done!
            print "Job ${i}_${j} forward already completed, skipping..."
            continue ;# move on to the next job
          } elseif {[ info exists fwd_dict(job${i}_${j})] && ($fwd_dict(job${i}_${j})=="failed") } {
            print "Job ${i}_${j} forward already failed, skipping..."
            continue ;# move on to the next job
          } else { ;# then the forward either never started or never completed, it must be (re)started
            if {[file exists "forward.$i.$j.restart.coor"] && [file exists "forward.$i.$j.restart.vel"] && [file exists "forward.$i.$j.restart.xsc"] } { ;# then commence from the restart files
              set start_stage "forward"
              reinitatoms forward.$i.$j.restart
              if {[ info exists fwd_dict(job${i}_${j}) ]} { ;# if we found info about this job in the FWD_COMPLETED.txt file
                set stepnum $fwd_dict(job${i}_${j}) ;# restart the step number that we left off at
                set incubation_start 0
                print "Resetting stepnum: $stepnum, and incubation_start: $incubation_start"
                if { $fwd_dict_start_crossed(job${i}_${j}) == "start_crossed" } {
                  set start_first_milestone_hit "True"
                }
              }
            } else {
              # weird but possible scenario: forward stage was entered but never made restarts. This is a problem because the velocities then are 
              # not well-defined. Restart the reversal stage
              print "Job ${i}_$j reversal will actually be restarted: forward stage entered but never made restarts."
              set start_stage "reverse"
              set start_first_milestone_hit "False"              
            }
          }
        }
      }
      
      set checkpoint_name "system${i}_${j}" ;# assign this system's checkpoint for easy loading by the assigned replica
      checkpointStore $checkpoint_name global ;# store this checkpoint to be reawakened later
      enqueue_work [list run_fwd_rvs $i $j $checkpoint_name $start_stage $start_first_milestone_hit $stepnum] ;# send this job to the stack to be pulled out by another replica
      incr num_submitted_jobs
      # Maybe there is some way to enqueue a dummy job...
      
      # ReplicaBarrier? We need to let all the replicas work through the systems that they have before assigning new ones.
      #if { [expr "(($i * $LAUNCHES_PER_CONFIG) + $j) % $FRAME_CHUNK_SIZE"] == 0} { schedule_work } ;# this is designed to prevent memory overload
      
      if {$umbrella_dcds_index > [llength $umbrella_dcds]} {set no_more_umb_dcds "True"; print "Requested reversals exceeds DCD file length. Skipping all jobs after this point."; break}
      for {set k 1} {$k < $umbrella_stride} {incr k} { ;# skip ahead by striding through the dcd
        set result [coorfile skip] ;# skip to the next frame for the next job
        if {$result == -1} { ;# then we've reached the end of this DCD file
          coorfile close ;# close it
          incr umbrella_dcds_index ;# increment the DCD filename index
          if {$umbrella_dcds_index >= [llength $umbrella_dcds]} {set no_more_umb_dcds "True"; print "Requested reversals exceeds DCD file length. Skipping all jobs after this point."; break}
          set umbrella_dcd [lindex $umbrella_dcds $umbrella_dcds_index] ;# pull out the relevant DCD file name
          print "Opening dcd file: $umbrella_dcd. index: $umbrella_dcds_index"
          coorfile open dcd $umbrella_dcd ;# open the file for reading
          coorfile skip ;# skip the first frame of this new DCD file
        }
      }
      if { $no_more_umb_dcds == "True" } { break }
      print "SEEKR: reading new positions"

      set result [coorfile read] ;# read positions from this frame in dcd for the next job
      if {$result == -1} { ;# then we've reached the end of this DCD file
        coorfile close ;# close it
        incr umbrella_dcds_index ;# increment the DCD filename index
        if {$umbrella_dcds_index >= [llength $umbrella_dcds]} {set no_more_umb_dcds "True"; print "Requested reversals exceeds DCD file length. Skipping all jobs after this point."; break}
        set umbrella_dcd [lindex $umbrella_dcds $umbrella_dcds_index] ;# pull out the relevant DCD file name
        print "Opening dcd file: $umbrella_dcd. index: $umbrella_dcds_index"
        coorfile open dcd $umbrella_dcd ;# open the file for reading
        coorfile read ;# read this frame of the new DCD for the next job
      }

      print "SEEKR: done reading positions for step $i"
      reinitvels $TEMP ;# randomly assign velocities based on temperature for the next job
      print "SEEKR: done initializing velocities for step $i. Velocity reinit $j."
    }
  }
  

  if {$num_submitted_jobs < $nr} { ;# if we have too few submitted jobs...
    # Then submit a bunch of dummy jobs. This won't waste too much time, but will give the replicas something to do so they won't
    # freeze because they are left idle.
    print "No normal jobs put into queue. Submitting dummy jobs to prevent the replicas from freezing."
    set max_dummy_jobs [expr "$nr + 2"]
    for {set num_dummy_jobs 0} {$num_dummy_jobs < $max_dummy_jobs} {incr num_dummy_jobs} { 
      enqueue_work [list run_dummy_job] 
    }
  }

  
  }
  print "Memory is clear. Moving on to simulation chunk number: $chunk_id"
  schedule_work
}

if { [myReplica] } { coorfile close } ;# close the dcd file because we're done

#schedule_work ;# now finally schedule the final bit of work for the other replicas
#print "Now Scheduling the Work."


exit 
